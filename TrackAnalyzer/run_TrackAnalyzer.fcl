#include "services_microboone.fcl"

process_name : UserAnalysis      #The process name must NOT contain any underscores

source : {
  module_type : RootInput
  maxEvents   : -1
#  firstRun: 5108
#  firstSubRun: 98
#  firstEvent: 4950
}

services : {

  TFileService: { fileName: "TrackAnalyzer.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 }     #default is one
  RandomNumberGenerator: {}                     #ART native random number generator
  user:
  {
	#BELOW you see a list of the common services! Uncomment the ones you need.
  	ExptGeoHelperInterface:         @local::microboone_geometry_helper
  	Geometry:                       @local::microboone_geo
 	#DetectorProperties:             @local::microboone_detproperties
 	#LArProperties:                  @local::microboone_properties
 	#DatabaseUtil:                   @local::microboone_database
 	#TimeService:                    @local::microboone_timeservice
 	#SpaceCharge:                    @local::microboone_spacecharge
 	#SeedService:                    @local::microboone_seedservice
	#LArFFT:                         @local::microboone_larfft
	#SignalShapingServiceMicroBooNE: @local::microboone_signalshapingservice
	#BackTracker:                    @local::microboone_backtracker  
	#MemoryPeakReporter: {}
	#OpDigiProperties:               @local::microboone_opdigiproperties
  }

  message:      @local::standard_info

}

outputs: {
  optionalout: { module_type: RootOutput
  	         fileName: "output_file.root"
		 fastCloning: false
		 outputCommands: ["drop *_*_*_*","keep *_*_*_UserAnalysis","keep *_pandora*_*_*" ]
		 }
}

physics: {

  producers : {
     isotag: { module_type: TrackContainmentTagger
     
#     	       TrackModuleLabels: ["pandoraCosmic","pandoraCosmicKHit","pandoraNu","pandoraNuKHit"]
	       ApplyTags: [ true, true ]
	       TrackModuleLabels: ["pandoraCosmic","pandoraNu"]
     	       TrackAnalysisAlg:{
	         ZBuffer:10
		 YBuffer:10
		 XBuffer:10
		 Isolation:2.5
		 Debug: false
	       }
	     }
  }
  analyzers: {
     # ParameterSets for zero or more analyzer modules
     trkana: { module_type: TrackAnalyzer
     
#     	       TrackModuleLabels: ["pandoraCosmic","pandoraCosmicKHit","pandoraNu","pandoraNuKHit"]
     	       TrackModuleLabels: ["pandoraCosmic","pandoraNu"]
     	       TrackAnalysisAlg:{
	         ZBuffer:10
		 YBuffer:10
		 XBuffer:10
		 Isolation:3
	       }
	     }
  }

  filters : {
     # ParameterSets for zero or more filter modules
  }

  #path0 : [  comma separated list of module labels of producer or filter modules  ]
  #path1 : [  comma separated list of module labels of producer or filter modules  ]

  #path2 : [  comma separated list of module labels of analyzer or output modules  ]
  #path3 : [  comma separated list of module labels of analyzer or output modules  ]

  #trigger_paths: [ path0, path1 ]
  #end_paths:     [ path2, path3 ]


  #here, just a shorthand: could have done ana: [ userana ] then end_paths: [ ana ]
  reco: [ isotag ]
  trigger_paths: [ reco ]
  ana1: [trkana]
  out : [ optionalout ]
  end_paths: [ out ]

}

